using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.XR.iOS;
using UnityEngine.UI;
using UnityEngine.SceneManagement;

public class gardenMaker : MonoBehaviour {

	public float createHeight;
	public float maxRayDistance = 30.0f;
	public LayerMask collisionLayer = 1 << 10;  //ARKitPlane layer
	private MaterialPropertyBlock props;
	private Vector3 placeLevel;
	public GameObject gardenController;
	private int totalBees;
	private float terrainWidth;
	private float terrainLength;
	private float centerZ = 0;
	private float centerX = 0;
	public GameObject twoFlower;
	private GameObject parentHolder;
	private int currentLevel;
	private int currentFlower;
	public GameObject alert;
	public Text beesCreated;
	public Text beesRemaining;
	public GameObject bee;
	public Text levelText;
	public Text beeNum;
	public RawImage popUp;
	public Text flowerNum;
	private int remainingFlowers;

	public Stack<GameObject> beeStack;

	// Use this for initialization
	void Start () {
		totalBees = 0;
		currentFlower = 0;
		createHeight = 0;
		props = new MaterialPropertyBlock ();
		// terrain size x
		terrainWidth = .5f;
		// terrain size z
		terrainLength =.5f;
		beeStack = new Stack<GameObject> ();
		keeper.Instance.currentGardenLevel++;

		beeNum.text = keeper.Instance.gardenBees.ToString ();

		parentHolder = new GameObject("BeeParent");
		parentHolder.tag = "bee";
		levelText.text = keeper.Instance.currentGardenLevel.ToString();
		beeNum.text = gardenController.GetComponent<gardenController> ().gardenBees+"";
		Debug.Log ("current level "+ keeper.Instance.currentGardenLevel);
		setLevel ();

	}

	public void CreateBall(Vector3 atPosition, GameObject dingdong)
	{
		GameObject ballGO = Instantiate (dingdong, atPosition, Quaternion.identity);
		ballGO.transform.RotateAround (ballGO.transform.position, new Vector3 (0, 1, 0), Random.Range (0, 360));

			moveBees (2, ballGO);
			Debug.Log("bees moved");
			//Debug.Log (atPosition.x + " " + atPosition.y + " " + atPosition.z);

	}

	// Update is called once per frame
	void Update () {
		remainingFlowers = gardenController.GetComponent<gardenController>().gardenFlowers-currentFlower+1;
		beesCreated.text = gardenController.GetComponent<gardenController>().gardenBees-beeStack.Count+" bees fed";
		beesRemaining.text = beeStack.Count+" bees left";
		/*
		if (popUp.IsActive()==true){
			//
			Debug.Log("popup active? "+popUp.IsActive()); 
		}
		*/
		//Debug.Log("popup active? "+popUp.IsActive()); 

		#if UNITY_EDITOR   //we will only use this script on the editor side, though there is nothing that would prevent it from working on device
		if (Input.GetMouseButtonDown (0)) 
		{
			Ray ray = Camera.main.ScreenPointToRay (Input.mousePosition);
			RaycastHit hit;

			//we'll try to hit one of the plane collider gameobjects that were generated by the plugin
			//effectively similar to calling HitTest with ARHitTestResultType.ARHitTestResultTypeExistingPlaneUsingExtent
			if (Physics.Raycast (ray, out hit, maxRayDistance, collisionLayer)) 
			{
				//CreateBall (new Vector3 (hit.point.x, hit.point.y + createHeight, hit.point.z),);

				//we're going to get the position from the contact point
				Debug.Log (string.Format ("x:{0:0.######} y:{1:0.######} z:{2:0.######}", hit.point.x, hit.point.y, hit.point.z));
			}
		}
		#else
		if (Input.touchCount > 0 )
		{
			var touch = Input.GetTouch(0);
			if (touch.phase == TouchPhase.Began)
			{
				var screenPosition = Camera.main.ScreenToViewportPoint(touch.position);
				ARPoint point = new ARPoint {
					x = screenPosition.x,
					y = screenPosition.y
				};
						
				List<ARHitTestResult> hitResults = UnityARSessionNativeInterface.GetARSessionNativeInterface ().HitTest (point, 
					ARHitTestResultType.ARHitTestResultTypeExistingPlaneUsingExtent);
				if (hitResults.Count > 0) {
					foreach (var hitResult in hitResults) {
						Vector3 position = UnityARMatrixOps.GetPosition (hitResult.worldTransform);
						//add createheight to the y below
						placeLevel = new Vector3 (position.x, createHeight, position.z);
						Vector3 flowerLevel = new Vector3(placeLevel.x, 0, placeLevel.z);

						flowerNum.text = remainingFlowers+" flowers left";


						if (totalBees!=0 && popUp.IsActive()==false && currentFlower<remainingFlowers){
							alert.SetActive(false);
							CreateBall(flowerLevel, twoFlower);
							currentFlower++;
							Debug.Log("current flower: "+currentFlower+", total bees: "+totalBees + ", remaining flowers: "+remainingFlowers);
						}
						else if ( totalBees==0 && popUp.IsActive()==false){
							//
							//alert.GetComponentInChildren<Text>().text = "You fed all the bees!";
							Debug.Log("SCENE RESET");
							SceneManager.LoadScene("Garden");

						}
						else if (keeper.Instance.currentGardenLevel==4){
							//

							SceneManager.LoadScene("Beez");
						}
						else{
							Debug.Log ("TRY AGAIN");
						}

						break;
					}
				}

			}
		}
		#endif

	}

	public void setLevel(){
		//
		currentLevel = keeper.Instance.currentGardenLevel;
		//alert.gameObject.SetActive (false);
		setLevels ();

	}

	void setLevels(){
		//destroy all islands, bees, flowers and reset which flowers are in the field, and which bees are in the stack

		DestroyGameObjectsWithTag ("beeParent");
		DestroyGameObjectsWithTag ("flower");
		beeStack.Clear ();

		//create flowers, bees and island
		//levelator (placeLevel, gardenController.GetComponent<gardenController>().gardenBees);
		placement(gardenController.GetComponent<gardenController>().gardenBees, bee);


	}
	public void placement(int boop, GameObject objectToPlace){

		//createBeesCalled = true;
		totalBees = totalBees + boop;
		Debug.Log (totalBees);

		/*
		hives = GameObject.FindGameObjectsWithTag ("flower");

		if (hives.Length == 0) {
			//float centerX = 0;
			//float centerZ = 0;
			//Debug.Log("are there hives?"+hives.Length);
		} else {
			centerX = hives [0].gameObject.transform.position.x;
			centerZ = hives [0].gameObject.transform.position.z;
			//Debug.Log("are there hives?"+hives.Length);
		}
		*/

		for (int i =0; i<boop; i++){
			//
			float posx = Random.Range (centerX-terrainWidth, centerX + terrainWidth);
			float posz = Random.Range (centerZ-terrainLength, centerZ + terrainLength);
			GameObject newObject = (GameObject)Instantiate (objectToPlace, new Vector3 (posx, .1f, posz), Quaternion.identity);

			GameObject parental = (GameObject)Instantiate (parentHolder,new Vector3 (posx, .1f, posz), Quaternion.identity);
			//Debug.Log("PUSH!");
			newObject.transform.SetParent(parental.transform);
			newObject.transform.RotateAround (newObject.transform.position, new Vector3 (0, 1, 0), Random.Range (0, 360));
			parental.tag = "beeParent";
			newObject.tag = "bee";
			beeStack.Push (newObject);
			//Debug.Log ("peek "+beeStack.Count);

		}
		//mover.GetComponent<BallMover> ().flowers = new GameObject[0];
		//System.Array.Clear(mover.GetComponent<BallMover> ().flowers,0, mover.GetComponent<BallMover> ().flowers.Length);

		//Debug.Log("All bees created!");

	}
	public static void DestroyGameObjectsWithTag(string tag)
	{
		GameObject[] gameObjects = GameObject.FindGameObjectsWithTag(tag);
		foreach (GameObject target in gameObjects) {
			GameObject.Destroy(target);
		}
	}

	public void moveBees(int numBees, GameObject flower) {
		//
		for (int i = 0; i < numBees; i++) {
			//get a bee 
			GameObject topBee = beeStack.Pop ();
			GameObject parental = topBee.transform.parent.gameObject;
			topBee.transform.parent = parental.transform;

			//scale bee down, parent bee to flower, set position to flower
			parental.transform.localScale = new Vector3 (.4f, .4f, .4f);
			parental.transform.SetParent (flower.transform);
			parental.transform.localPosition = keeper.Instance.twoBees [i];
			Destroy (topBee.GetComponent<Rigidbody> ());
			totalBees=totalBees-1;
			Handheld.Vibrate ();
		}
	}
}
